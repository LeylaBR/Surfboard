let myMap;

const init = () => {
  myMap = new ymaps.Map("map", {
    center: [59.95, 30.36],
    zoom: 10,
    controls: [],
  });

  let coords = [
    [59.93563, 30.327123],
    [59.897503, 30.285242],
    [59.906931, 30.515046],
    [60.051255, 30.438184],
  ];

  let myCollection = new ymaps.GeoObjectCollection(
    {},
    {
      iconLayout: "default#image",
      draggable: false,
      iconImageHref: "./img/marker.svg",
      iconImageSize: [48, 63],
      iconImageOffset: [-35, -52],
    }
  );

  coords.forEach((coord) => {
    myCollection.add(new ymaps.Placemark(coord));
  });

  myMap.geoObjects.add(myCollection);

  myMap.behaviors.disable("scrollZoom");
};

ymaps.ready(init);
;const mesureWidth = (item) => {
  let reqItemWidth = 0;
  const screenWidth = $(window).width();
  const container = item.closest(".menu-slider__list");
  const titleBlock = container.find(".menu-slider__subtitle");
  const titleWidth = titleBlock.width() * titleBlock.length;

  const textContainer = item.find(".menu-slider__desc-container");
  const paddingLeft = parseInt(textContainer.css("padding-left"));
  const paddingRight = parseInt(textContainer.css("padding-right"));

  const isMobile = window.matchMedia("(max-width: 768px)").matches;

  if (isMobile) {
    reqItemWidth = screenWidth - titleWidth;
  } else {
    reqItemWidth = 524;
  }

  return {
    container: reqItemWidth,
    textContainer: reqItemWidth - paddingLeft - paddingRight,
  };
};

const closeEveryItem = (container) => {
  const item = container.find(".menu-slider__item");
  const content = container.find(".menu-slider__desc");

  item.removeClass("active");
  content.width(0);
};

const openItem = (item) => {
  const hiddenDesc = item.find(".menu-slider__desc");
  const reqWidth = mesureWidth(item);
  const textBlock = item.find(".menu-slider__desc-container");
  item.addClass("active");

  hiddenDesc.width(reqWidth.container);
  textBlock.width(reqWidth.textContainer);
};

$(".menu-slider__subtitle").on("click", (e) => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const item = $this.closest(".menu-slider__item");
  const itemOpened = item.hasClass("active");
  const container = $this.closest(".menu-slider__list");

  if (itemOpened) {
    closeEveryItem(container);
  } else {
    closeEveryItem(container);
    openItem(item);
  }
});

$(".menu-slider-close-icon").on("click", (e) => {
  closeEveryItem($(".menu-slider__list"));
});
;const validateFields = (form, fieldArray) => {
  fieldArray.forEach((element) => {
    element.removeClass("input-error");
    if (element.val().trim() === "") {
      element.addClass("input-error");
    }
  });

  const errorElements = form.find(".input-error");

  return errorElements.length === 0;
};

$(".form").submit((e) => {
  e.preventDefault();

  const form = $(e.currentTarget);
  const name = form.find("[name='name']");
  const phone = form.find("[name='phone']");
  const comment = form.find("[name='comment']");
  const to = form.find("[name='to']");

  const modal = $("#modal");
  const content = modal.find(".modal__content");

  content.removeClass("error-modal");

  const isValid = validateFields(form, [name, phone, comment, to]);

  if (isValid) {
    $.ajax({
      url: "https://webdev-api.loftschool.com/sendmail",
      method: "post",
      data: {
        name: name.val(),
        phone: phone.val(),
        comment: comment.val(),
        to: to.val(),
      },
      success: (data) => {
        content.text(data.message);
        $.fancybox.open({
          src: "#modal",
          type: "inline",
        });

        $(form)[0].reset();
      },
      error: (data) => {
        const message = data.responseJSON.message;
        content.text(message);
        content.addClass("error-modal");

        $.fancybox.open({
          src: "#modal",
          type: "inline",
        });
      },
    });
  }
});

$(".app-submit-button").click((e) => {
  e.preventDefault();
  $.fancybox.close();
});
;const section = $("section");
const display = $(".maincontent");
const sideMenu = $(".fixed-menu");
const menuItems = sideMenu.find(".fixed-menu__item");

let inScroll = false;

section.first().addClass("active");

const countSectionPosition = (sectionEq) => {
  return sectionEq * -100;
};

const changeMenuThemeForSection = (sectionEq) => {
  const currentSection = section.eq(sectionEq);
  const menuTheme = currentSection.attr("data-sidemenu-theme");

  if (menuTheme === "black") {
    sideMenu.addClass("black");
  } else {
    sideMenu.removeClass("black");
  }
};

const resetActiveClassForItem = (items, itemEq, activeClass) => {
  items.eq(itemEq).addClass(activeClass).siblings().removeClass("active");
};

const performTransition = (sectionEq) => {
  if (inScroll) return;
  const transitionOver = 500;
  const mouseInertiaOver = 300;

  inScroll = true;
  const position = countSectionPosition(sectionEq);

  changeMenuThemeForSection(sectionEq);

  display.css({
    transform: `translateY(${position}%)`,
  });

  resetActiveClassForItem(section, sectionEq, "active");

  setTimeout(() => {
    inScroll = false;

    resetActiveClassForItem(menuItems, sectionEq, "active");
  }, transitionOver + mouseInertiaOver);
};

const viewportScroller = () => {
  const activeSection = section.filter(".active");
  const nextSection = activeSection.next();
  const prevSection = activeSection.prev();

  return {
    next() {
      if (nextSection.length) {
        performTransition(nextSection.index());
      }
    },
    prev() {
      if (prevSection.length) {
        performTransition(prevSection.index());
      }
    },
  };
};

$(window).on("wheel", (e) => {
  const deltaY = e.originalEvent.deltaY;
  const scroller = viewportScroller();

  if (deltaY > 0) {
    scroller.next();
  }

  if (deltaY < 0) {
    scroller.prev();
  }
});

$(window).on("keydown", (e) => {
  const tagName = e.target.tagName.toLowerCase();
  const userTypingInInputs = tagName === "input" || tagName === "textarea";
  const scroller = viewportScroller();

  if (userTypingInInputs) return;
  switch (e.keyCode) {
    case 38:
      scroller.prev();
      break;

    case 40:
      scroller.next();
      break;
  }
});

$(".wraper").on("touchmove", (e) => e.preventDefault());

$("[data-scroll-to]").click((e) => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-scroll-to");
  const reqSection = $(`[data-section-id=${target}]`);

  performTransition(reqSection.index());
});

// https://github.com/mattbryson/TouchSwipe-Jquery-Plugin

$("body").swipe({
  swipe: function (_, direction) {
    if (direction !== "up" || direction !== "down") {
      return;
    }
    const scroller = viewportScroller();
    let scrollDirection = "";

    if (direction === "up") scrollDirection = "next";
    if (direction === "down") scrollDirection = "prev";

    scroller[scrollDirection]();
  },
  excludedElements: "label,button,input,textarea, .noSwipe",
});
;const playerContainer = $(".player");
const playerStart = $(".player__start");
const playerDuration = $(".player__duration-estimate");
const playerCompleted = $(".player__duration-completed");
const playerButton = $(".player__playback-button");
const playerPlaybackYellow = $(".player__playback-yellow");
const playerPlayback = $(".player__playback");
const playerSplash = $(".player__splash");

let player;

playerStart.click((e) => {
  if (playerContainer.hasClass("paused")) {
    player.pauseVideo();
  } else {
    player.playVideo();
  }
});

playerPlayback.click((e) => {
  const bar = $(e.currentTarget);
  const clikedPosition = e.originalEvent.layerX;
  const newButtonPosition = (clikedPosition / bar.width()) * 100;
  const newPlaybackPositionSec =
    (player.getDuration() / 100) * newButtonPosition;

  playerButton.css({
    left: `${newButtonPosition}%`,
  });

  playerPlaybackYellow.css({
    width: `${newButtonPosition}%`,
  });

  player.seekTo(newPlaybackPositionSec);
});

playerSplash.click((e) => {
  player.playVideo(e);
});

const onPlayerReady = () => {
  let interval;
  const durationSec = player.getDuration();

  playerDuration.text(durationSec);

  if (typeof interval !== "undefined") {
    clearInterval(interval);
  }

  interval = setInterval(() => {
    const completedSec = player.getCurrentTime();
    const completedPercent = (completedSec / durationSec) * 100;

    playerButton.css({
      left: `${completedPercent}%`,
    });

    playerPlaybackYellow.css({
      width: `${completedPercent}%`,
    });

    playerCompleted.text(completedSec);
  }, 1000);
};

const onPlayerStateChange = (event) => {
  /*
     -1 (воспроизведение видео не начато)
     0 (воспроизведение видео завершено)
     1 (воспроизведение)
     2 (пауза)
     3 (буферизация)
     5 (видео подают реплики).
  */
  switch (event.data) {
    case 1:
      playerContainer.addClass("active");
      playerContainer.addClass("paused");
      break;

    case 2:
      playerContainer.removeClass("active");
      playerContainer.removeClass("paused");
      break;
  }
};

const isMobile = window.matchMedia("(max-width: 768px)").matches;

function onYouTubeIframeAPIReady() {
  player = new YT.Player("yt-player", {
    height: "392",
    width: "622",
    videoId: "J5KIF3sVQZM",
    events: {
      onReady: onPlayerReady,
      onStateChange: onPlayerStateChange,
    },
    playerVars: {
      controls: 0,
      disablekb: 0,
      showinfo: 0,
      rel: 0,
      autoplay: 0,
      modestbranding: 0,
    },
  });
}

const playerVolume = $(".player__volume");
const playerRegulate = $(".player__volume-regulate");
const playerVolumeButton = $(".player__volume__button");
const playerRegulateYellow = $(".player__volume__regulate-yellow");

const setVolumeStyle = (width, left) => {
  playerRegulateYellow.css({
    width: `${width}%`,
  });

  playerVolumeButton.css({
    left: `${left}%`,
  });
};

playerVolume.click(() => {
  if (playerVolume.hasClass("mute")) {
    playerVolume.removeClass("mute");
    player.unMute();
    setVolumeStyle(100, 85);
  } else {
    playerVolume.addClass("mute");
    player.mute();
    setVolumeStyle(0, 0);
  }
});
setVolumeStyle(100, 85);

playerRegulate.click((e) => {
  const band = $(e.currentTarget);
  const clickPosition = e.originalEvent.layerX;
  const newVolumePosition = (clickPosition / band.width()) * 100;
  const newPlayerRegulatePositionPercent =
    (player.getDuration() / 100) * newVolumePosition;

  setVolumeStyle(newVolumePosition, newVolumePosition);

  player.setVolume(newPlayerRegulatePositionPercent);
});
;const openHamburger = document.querySelector("#menuHamburger");
const menu = document.querySelector("#menu");
const menuClose = document.querySelector("#menu-close");
const menuAppearing = document.querySelectorAll(".hamburger__menu-link");
const body = document.querySelector("body");

const setStyles = (menuStyle, bodyStyle) => {
  menu.style.display = menuStyle;
  body.style.overflow = bodyStyle;
};

openHamburger.addEventListener("click", (e) => {
  setStyles("block", "hidden");
});

menuClose.addEventListener("click", (e) => {
  setStyles("none", "initial");
});

menuAppearing.forEach((link) => {
  link.addEventListener("click", (e) => {
    // e.preventDefault();
    setStyles("none", "initial");
  });
});

const openDescription = $(".team__desc-info");

openDescription.each((_, link) => {
  $(link).on("click", (e) => {
    openDescription.each((_, elem) => {
      if (e.currentTarget !== elem) {
        $(elem).parent().removeClass("active");
      }
    });
    $(e.currentTarget).parent().toggleClass("active");
  });
});

const openReviews = $(".reviews__switcher-item");
const openItems = $(".reviews__item");

openReviews.each((_, link) => {
  $(link).on("click", (e) => {
    e.preventDefault();
    openReviews.each((index, elem) => {
      if ($(elem).hasClass("active")) {
        $(elem).removeClass("active");
        $(openItems[index]).removeClass("active");
      }
      if (elem === e.currentTarget) {
        $(elem).addClass("active");
        $(openItems[index]).addClass("active");
      }
    });
  });
});

const pointerLeft = $(".shop__pointer-left");
const pointerRight = $(".shop__pointer-right");

const slider = $(".shop__content-list").bxSlider({
  pager: false,
  controls: false,
});

pointerLeft.click((e) => {
  e.preventDefault();
  slider.goToPrevSlide();
});

pointerRight.click((e) => {
  e.preventDefault();
  slider.goToNextSlide();
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC5qcyIsIm1lbnVTbGlkZXIuanMiLCJtb2RhbC5qcyIsIm9wcy5qcyIsInBsYXllci5qcyIsIl9zY3JpcHQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0M5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0NsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0NqSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0N0SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbXlNYXA7XHJcblxyXG5jb25zdCBpbml0ID0gKCkgPT4ge1xyXG4gIG15TWFwID0gbmV3IHltYXBzLk1hcChcIm1hcFwiLCB7XHJcbiAgICBjZW50ZXI6IFs1OS45NSwgMzAuMzZdLFxyXG4gICAgem9vbTogMTAsXHJcbiAgICBjb250cm9sczogW10sXHJcbiAgfSk7XHJcblxyXG4gIGxldCBjb29yZHMgPSBbXHJcbiAgICBbNTkuOTM1NjMsIDMwLjMyNzEyM10sXHJcbiAgICBbNTkuODk3NTAzLCAzMC4yODUyNDJdLFxyXG4gICAgWzU5LjkwNjkzMSwgMzAuNTE1MDQ2XSxcclxuICAgIFs2MC4wNTEyNTUsIDMwLjQzODE4NF0sXHJcbiAgXTtcclxuXHJcbiAgbGV0IG15Q29sbGVjdGlvbiA9IG5ldyB5bWFwcy5HZW9PYmplY3RDb2xsZWN0aW9uKFxyXG4gICAge30sXHJcbiAgICB7XHJcbiAgICAgIGljb25MYXlvdXQ6IFwiZGVmYXVsdCNpbWFnZVwiLFxyXG4gICAgICBkcmFnZ2FibGU6IGZhbHNlLFxyXG4gICAgICBpY29uSW1hZ2VIcmVmOiBcIi4vaW1nL21hcmtlci5zdmdcIixcclxuICAgICAgaWNvbkltYWdlU2l6ZTogWzQ4LCA2M10sXHJcbiAgICAgIGljb25JbWFnZU9mZnNldDogWy0zNSwgLTUyXSxcclxuICAgIH1cclxuICApO1xyXG5cclxuICBjb29yZHMuZm9yRWFjaCgoY29vcmQpID0+IHtcclxuICAgIG15Q29sbGVjdGlvbi5hZGQobmV3IHltYXBzLlBsYWNlbWFyayhjb29yZCkpO1xyXG4gIH0pO1xyXG5cclxuICBteU1hcC5nZW9PYmplY3RzLmFkZChteUNvbGxlY3Rpb24pO1xyXG5cclxuICBteU1hcC5iZWhhdmlvcnMuZGlzYWJsZShcInNjcm9sbFpvb21cIik7XHJcbn07XHJcblxyXG55bWFwcy5yZWFkeShpbml0KTtcclxuIiwiY29uc3QgbWVzdXJlV2lkdGggPSAoaXRlbSkgPT4ge1xyXG4gIGxldCByZXFJdGVtV2lkdGggPSAwO1xyXG4gIGNvbnN0IHNjcmVlbldpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XHJcbiAgY29uc3QgY29udGFpbmVyID0gaXRlbS5jbG9zZXN0KFwiLm1lbnUtc2xpZGVyX19saXN0XCIpO1xyXG4gIGNvbnN0IHRpdGxlQmxvY2sgPSBjb250YWluZXIuZmluZChcIi5tZW51LXNsaWRlcl9fc3VidGl0bGVcIik7XHJcbiAgY29uc3QgdGl0bGVXaWR0aCA9IHRpdGxlQmxvY2sud2lkdGgoKSAqIHRpdGxlQmxvY2subGVuZ3RoO1xyXG5cclxuICBjb25zdCB0ZXh0Q29udGFpbmVyID0gaXRlbS5maW5kKFwiLm1lbnUtc2xpZGVyX19kZXNjLWNvbnRhaW5lclwiKTtcclxuICBjb25zdCBwYWRkaW5nTGVmdCA9IHBhcnNlSW50KHRleHRDb250YWluZXIuY3NzKFwicGFkZGluZy1sZWZ0XCIpKTtcclxuICBjb25zdCBwYWRkaW5nUmlnaHQgPSBwYXJzZUludCh0ZXh0Q29udGFpbmVyLmNzcyhcInBhZGRpbmctcmlnaHRcIikpO1xyXG5cclxuICBjb25zdCBpc01vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1heC13aWR0aDogNzY4cHgpXCIpLm1hdGNoZXM7XHJcblxyXG4gIGlmIChpc01vYmlsZSkge1xyXG4gICAgcmVxSXRlbVdpZHRoID0gc2NyZWVuV2lkdGggLSB0aXRsZVdpZHRoO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXFJdGVtV2lkdGggPSA1MjQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY29udGFpbmVyOiByZXFJdGVtV2lkdGgsXHJcbiAgICB0ZXh0Q29udGFpbmVyOiByZXFJdGVtV2lkdGggLSBwYWRkaW5nTGVmdCAtIHBhZGRpbmdSaWdodCxcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgY2xvc2VFdmVyeUl0ZW0gPSAoY29udGFpbmVyKSA9PiB7XHJcbiAgY29uc3QgaXRlbSA9IGNvbnRhaW5lci5maW5kKFwiLm1lbnUtc2xpZGVyX19pdGVtXCIpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBjb250YWluZXIuZmluZChcIi5tZW51LXNsaWRlcl9fZGVzY1wiKTtcclxuXHJcbiAgaXRlbS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICBjb250ZW50LndpZHRoKDApO1xyXG59O1xyXG5cclxuY29uc3Qgb3Blbkl0ZW0gPSAoaXRlbSkgPT4ge1xyXG4gIGNvbnN0IGhpZGRlbkRlc2MgPSBpdGVtLmZpbmQoXCIubWVudS1zbGlkZXJfX2Rlc2NcIik7XHJcbiAgY29uc3QgcmVxV2lkdGggPSBtZXN1cmVXaWR0aChpdGVtKTtcclxuICBjb25zdCB0ZXh0QmxvY2sgPSBpdGVtLmZpbmQoXCIubWVudS1zbGlkZXJfX2Rlc2MtY29udGFpbmVyXCIpO1xyXG4gIGl0ZW0uYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcblxyXG4gIGhpZGRlbkRlc2Mud2lkdGgocmVxV2lkdGguY29udGFpbmVyKTtcclxuICB0ZXh0QmxvY2sud2lkdGgocmVxV2lkdGgudGV4dENvbnRhaW5lcik7XHJcbn07XHJcblxyXG4kKFwiLm1lbnUtc2xpZGVyX19zdWJ0aXRsZVwiKS5vbihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICBjb25zdCAkdGhpcyA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICBjb25zdCBpdGVtID0gJHRoaXMuY2xvc2VzdChcIi5tZW51LXNsaWRlcl9faXRlbVwiKTtcclxuICBjb25zdCBpdGVtT3BlbmVkID0gaXRlbS5oYXNDbGFzcyhcImFjdGl2ZVwiKTtcclxuICBjb25zdCBjb250YWluZXIgPSAkdGhpcy5jbG9zZXN0KFwiLm1lbnUtc2xpZGVyX19saXN0XCIpO1xyXG5cclxuICBpZiAoaXRlbU9wZW5lZCkge1xyXG4gICAgY2xvc2VFdmVyeUl0ZW0oY29udGFpbmVyKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY2xvc2VFdmVyeUl0ZW0oY29udGFpbmVyKTtcclxuICAgIG9wZW5JdGVtKGl0ZW0pO1xyXG4gIH1cclxufSk7XHJcblxyXG4kKFwiLm1lbnUtc2xpZGVyLWNsb3NlLWljb25cIikub24oXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gIGNsb3NlRXZlcnlJdGVtKCQoXCIubWVudS1zbGlkZXJfX2xpc3RcIikpO1xyXG59KTtcclxuIiwiY29uc3QgdmFsaWRhdGVGaWVsZHMgPSAoZm9ybSwgZmllbGRBcnJheSkgPT4ge1xyXG4gIGZpZWxkQXJyYXkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhcImlucHV0LWVycm9yXCIpO1xyXG4gICAgaWYgKGVsZW1lbnQudmFsKCkudHJpbSgpID09PSBcIlwiKSB7XHJcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoXCJpbnB1dC1lcnJvclwiKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgY29uc3QgZXJyb3JFbGVtZW50cyA9IGZvcm0uZmluZChcIi5pbnB1dC1lcnJvclwiKTtcclxuXHJcbiAgcmV0dXJuIGVycm9yRWxlbWVudHMubGVuZ3RoID09PSAwO1xyXG59O1xyXG5cclxuJChcIi5mb3JtXCIpLnN1Ym1pdCgoZSkgPT4ge1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgY29uc3QgZm9ybSA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICBjb25zdCBuYW1lID0gZm9ybS5maW5kKFwiW25hbWU9J25hbWUnXVwiKTtcclxuICBjb25zdCBwaG9uZSA9IGZvcm0uZmluZChcIltuYW1lPSdwaG9uZSddXCIpO1xyXG4gIGNvbnN0IGNvbW1lbnQgPSBmb3JtLmZpbmQoXCJbbmFtZT0nY29tbWVudCddXCIpO1xyXG4gIGNvbnN0IHRvID0gZm9ybS5maW5kKFwiW25hbWU9J3RvJ11cIik7XHJcblxyXG4gIGNvbnN0IG1vZGFsID0gJChcIiNtb2RhbFwiKTtcclxuICBjb25zdCBjb250ZW50ID0gbW9kYWwuZmluZChcIi5tb2RhbF9fY29udGVudFwiKTtcclxuXHJcbiAgY29udGVudC5yZW1vdmVDbGFzcyhcImVycm9yLW1vZGFsXCIpO1xyXG5cclxuICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdGVGaWVsZHMoZm9ybSwgW25hbWUsIHBob25lLCBjb21tZW50LCB0b10pO1xyXG5cclxuICBpZiAoaXNWYWxpZCkge1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgdXJsOiBcImh0dHBzOi8vd2ViZGV2LWFwaS5sb2Z0c2Nob29sLmNvbS9zZW5kbWFpbFwiLFxyXG4gICAgICBtZXRob2Q6IFwicG9zdFwiLFxyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgbmFtZTogbmFtZS52YWwoKSxcclxuICAgICAgICBwaG9uZTogcGhvbmUudmFsKCksXHJcbiAgICAgICAgY29tbWVudDogY29tbWVudC52YWwoKSxcclxuICAgICAgICB0bzogdG8udmFsKCksXHJcbiAgICAgIH0sXHJcbiAgICAgIHN1Y2Nlc3M6IChkYXRhKSA9PiB7XHJcbiAgICAgICAgY29udGVudC50ZXh0KGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgJC5mYW5jeWJveC5vcGVuKHtcclxuICAgICAgICAgIHNyYzogXCIjbW9kYWxcIixcclxuICAgICAgICAgIHR5cGU6IFwiaW5saW5lXCIsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoZm9ybSlbMF0ucmVzZXQoKTtcclxuICAgICAgfSxcclxuICAgICAgZXJyb3I6IChkYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGRhdGEucmVzcG9uc2VKU09OLm1lc3NhZ2U7XHJcbiAgICAgICAgY29udGVudC50ZXh0KG1lc3NhZ2UpO1xyXG4gICAgICAgIGNvbnRlbnQuYWRkQ2xhc3MoXCJlcnJvci1tb2RhbFwiKTtcclxuXHJcbiAgICAgICAgJC5mYW5jeWJveC5vcGVuKHtcclxuICAgICAgICAgIHNyYzogXCIjbW9kYWxcIixcclxuICAgICAgICAgIHR5cGU6IFwiaW5saW5lXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG5cclxuJChcIi5hcHAtc3VibWl0LWJ1dHRvblwiKS5jbGljaygoZSkgPT4ge1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuICAkLmZhbmN5Ym94LmNsb3NlKCk7XHJcbn0pO1xyXG4iLCJjb25zdCBzZWN0aW9uID0gJChcInNlY3Rpb25cIik7XHJcbmNvbnN0IGRpc3BsYXkgPSAkKFwiLm1haW5jb250ZW50XCIpO1xyXG5jb25zdCBzaWRlTWVudSA9ICQoXCIuZml4ZWQtbWVudVwiKTtcclxuY29uc3QgbWVudUl0ZW1zID0gc2lkZU1lbnUuZmluZChcIi5maXhlZC1tZW51X19pdGVtXCIpO1xyXG5cclxubGV0IGluU2Nyb2xsID0gZmFsc2U7XHJcblxyXG5zZWN0aW9uLmZpcnN0KCkuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcblxyXG5jb25zdCBjb3VudFNlY3Rpb25Qb3NpdGlvbiA9IChzZWN0aW9uRXEpID0+IHtcclxuICByZXR1cm4gc2VjdGlvbkVxICogLTEwMDtcclxufTtcclxuXHJcbmNvbnN0IGNoYW5nZU1lbnVUaGVtZUZvclNlY3Rpb24gPSAoc2VjdGlvbkVxKSA9PiB7XHJcbiAgY29uc3QgY3VycmVudFNlY3Rpb24gPSBzZWN0aW9uLmVxKHNlY3Rpb25FcSk7XHJcbiAgY29uc3QgbWVudVRoZW1lID0gY3VycmVudFNlY3Rpb24uYXR0cihcImRhdGEtc2lkZW1lbnUtdGhlbWVcIik7XHJcblxyXG4gIGlmIChtZW51VGhlbWUgPT09IFwiYmxhY2tcIikge1xyXG4gICAgc2lkZU1lbnUuYWRkQ2xhc3MoXCJibGFja1wiKTtcclxuICB9IGVsc2Uge1xyXG4gICAgc2lkZU1lbnUucmVtb3ZlQ2xhc3MoXCJibGFja1wiKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCByZXNldEFjdGl2ZUNsYXNzRm9ySXRlbSA9IChpdGVtcywgaXRlbUVxLCBhY3RpdmVDbGFzcykgPT4ge1xyXG4gIGl0ZW1zLmVxKGl0ZW1FcSkuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbn07XHJcblxyXG5jb25zdCBwZXJmb3JtVHJhbnNpdGlvbiA9IChzZWN0aW9uRXEpID0+IHtcclxuICBpZiAoaW5TY3JvbGwpIHJldHVybjtcclxuICBjb25zdCB0cmFuc2l0aW9uT3ZlciA9IDUwMDtcclxuICBjb25zdCBtb3VzZUluZXJ0aWFPdmVyID0gMzAwO1xyXG5cclxuICBpblNjcm9sbCA9IHRydWU7XHJcbiAgY29uc3QgcG9zaXRpb24gPSBjb3VudFNlY3Rpb25Qb3NpdGlvbihzZWN0aW9uRXEpO1xyXG5cclxuICBjaGFuZ2VNZW51VGhlbWVGb3JTZWN0aW9uKHNlY3Rpb25FcSk7XHJcblxyXG4gIGRpc3BsYXkuY3NzKHtcclxuICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoJHtwb3NpdGlvbn0lKWAsXHJcbiAgfSk7XHJcblxyXG4gIHJlc2V0QWN0aXZlQ2xhc3NGb3JJdGVtKHNlY3Rpb24sIHNlY3Rpb25FcSwgXCJhY3RpdmVcIik7XHJcblxyXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgaW5TY3JvbGwgPSBmYWxzZTtcclxuXHJcbiAgICByZXNldEFjdGl2ZUNsYXNzRm9ySXRlbShtZW51SXRlbXMsIHNlY3Rpb25FcSwgXCJhY3RpdmVcIik7XHJcbiAgfSwgdHJhbnNpdGlvbk92ZXIgKyBtb3VzZUluZXJ0aWFPdmVyKTtcclxufTtcclxuXHJcbmNvbnN0IHZpZXdwb3J0U2Nyb2xsZXIgPSAoKSA9PiB7XHJcbiAgY29uc3QgYWN0aXZlU2VjdGlvbiA9IHNlY3Rpb24uZmlsdGVyKFwiLmFjdGl2ZVwiKTtcclxuICBjb25zdCBuZXh0U2VjdGlvbiA9IGFjdGl2ZVNlY3Rpb24ubmV4dCgpO1xyXG4gIGNvbnN0IHByZXZTZWN0aW9uID0gYWN0aXZlU2VjdGlvbi5wcmV2KCk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBuZXh0KCkge1xyXG4gICAgICBpZiAobmV4dFNlY3Rpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgcGVyZm9ybVRyYW5zaXRpb24obmV4dFNlY3Rpb24uaW5kZXgoKSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwcmV2KCkge1xyXG4gICAgICBpZiAocHJldlNlY3Rpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgcGVyZm9ybVRyYW5zaXRpb24ocHJldlNlY3Rpb24uaW5kZXgoKSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgfTtcclxufTtcclxuXHJcbiQod2luZG93KS5vbihcIndoZWVsXCIsIChlKSA9PiB7XHJcbiAgY29uc3QgZGVsdGFZID0gZS5vcmlnaW5hbEV2ZW50LmRlbHRhWTtcclxuICBjb25zdCBzY3JvbGxlciA9IHZpZXdwb3J0U2Nyb2xsZXIoKTtcclxuXHJcbiAgaWYgKGRlbHRhWSA+IDApIHtcclxuICAgIHNjcm9sbGVyLm5leHQoKTtcclxuICB9XHJcblxyXG4gIGlmIChkZWx0YVkgPCAwKSB7XHJcbiAgICBzY3JvbGxlci5wcmV2KCk7XHJcbiAgfVxyXG59KTtcclxuXHJcbiQod2luZG93KS5vbihcImtleWRvd25cIiwgKGUpID0+IHtcclxuICBjb25zdCB0YWdOYW1lID0gZS50YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gIGNvbnN0IHVzZXJUeXBpbmdJbklucHV0cyA9IHRhZ05hbWUgPT09IFwiaW5wdXRcIiB8fCB0YWdOYW1lID09PSBcInRleHRhcmVhXCI7XHJcbiAgY29uc3Qgc2Nyb2xsZXIgPSB2aWV3cG9ydFNjcm9sbGVyKCk7XHJcblxyXG4gIGlmICh1c2VyVHlwaW5nSW5JbnB1dHMpIHJldHVybjtcclxuICBzd2l0Y2ggKGUua2V5Q29kZSkge1xyXG4gICAgY2FzZSAzODpcclxuICAgICAgc2Nyb2xsZXIucHJldigpO1xyXG4gICAgICBicmVhaztcclxuXHJcbiAgICBjYXNlIDQwOlxyXG4gICAgICBzY3JvbGxlci5uZXh0KCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxufSk7XHJcblxyXG4kKFwiLndyYXBlclwiKS5vbihcInRvdWNobW92ZVwiLCAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcclxuXHJcbiQoXCJbZGF0YS1zY3JvbGwtdG9dXCIpLmNsaWNrKChlKSA9PiB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICBjb25zdCAkdGhpcyA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICBjb25zdCB0YXJnZXQgPSAkdGhpcy5hdHRyKFwiZGF0YS1zY3JvbGwtdG9cIik7XHJcbiAgY29uc3QgcmVxU2VjdGlvbiA9ICQoYFtkYXRhLXNlY3Rpb24taWQ9JHt0YXJnZXR9XWApO1xyXG5cclxuICBwZXJmb3JtVHJhbnNpdGlvbihyZXFTZWN0aW9uLmluZGV4KCkpO1xyXG59KTtcclxuXHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0YnJ5c29uL1RvdWNoU3dpcGUtSnF1ZXJ5LVBsdWdpblxyXG5cclxuJChcImJvZHlcIikuc3dpcGUoe1xyXG4gIHN3aXBlOiBmdW5jdGlvbiAoXywgZGlyZWN0aW9uKSB7XHJcbiAgICBpZiAoZGlyZWN0aW9uICE9PSBcInVwXCIgfHwgZGlyZWN0aW9uICE9PSBcImRvd25cIikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBzY3JvbGxlciA9IHZpZXdwb3J0U2Nyb2xsZXIoKTtcclxuICAgIGxldCBzY3JvbGxEaXJlY3Rpb24gPSBcIlwiO1xyXG5cclxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwidXBcIikgc2Nyb2xsRGlyZWN0aW9uID0gXCJuZXh0XCI7XHJcbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImRvd25cIikgc2Nyb2xsRGlyZWN0aW9uID0gXCJwcmV2XCI7XHJcblxyXG4gICAgc2Nyb2xsZXJbc2Nyb2xsRGlyZWN0aW9uXSgpO1xyXG4gIH0sXHJcbiAgZXhjbHVkZWRFbGVtZW50czogXCJsYWJlbCxidXR0b24saW5wdXQsdGV4dGFyZWEsIC5ub1N3aXBlXCIsXHJcbn0pO1xyXG4iLCJjb25zdCBwbGF5ZXJDb250YWluZXIgPSAkKFwiLnBsYXllclwiKTtcclxuY29uc3QgcGxheWVyU3RhcnQgPSAkKFwiLnBsYXllcl9fc3RhcnRcIik7XHJcbmNvbnN0IHBsYXllckR1cmF0aW9uID0gJChcIi5wbGF5ZXJfX2R1cmF0aW9uLWVzdGltYXRlXCIpO1xyXG5jb25zdCBwbGF5ZXJDb21wbGV0ZWQgPSAkKFwiLnBsYXllcl9fZHVyYXRpb24tY29tcGxldGVkXCIpO1xyXG5jb25zdCBwbGF5ZXJCdXR0b24gPSAkKFwiLnBsYXllcl9fcGxheWJhY2stYnV0dG9uXCIpO1xyXG5jb25zdCBwbGF5ZXJQbGF5YmFja1llbGxvdyA9ICQoXCIucGxheWVyX19wbGF5YmFjay15ZWxsb3dcIik7XHJcbmNvbnN0IHBsYXllclBsYXliYWNrID0gJChcIi5wbGF5ZXJfX3BsYXliYWNrXCIpO1xyXG5jb25zdCBwbGF5ZXJTcGxhc2ggPSAkKFwiLnBsYXllcl9fc3BsYXNoXCIpO1xyXG5cclxubGV0IHBsYXllcjtcclxuXHJcbnBsYXllclN0YXJ0LmNsaWNrKChlKSA9PiB7XHJcbiAgaWYgKHBsYXllckNvbnRhaW5lci5oYXNDbGFzcyhcInBhdXNlZFwiKSkge1xyXG4gICAgcGxheWVyLnBhdXNlVmlkZW8oKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcGxheWVyLnBsYXlWaWRlbygpO1xyXG4gIH1cclxufSk7XHJcblxyXG5wbGF5ZXJQbGF5YmFjay5jbGljaygoZSkgPT4ge1xyXG4gIGNvbnN0IGJhciA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICBjb25zdCBjbGlrZWRQb3NpdGlvbiA9IGUub3JpZ2luYWxFdmVudC5sYXllclg7XHJcbiAgY29uc3QgbmV3QnV0dG9uUG9zaXRpb24gPSAoY2xpa2VkUG9zaXRpb24gLyBiYXIud2lkdGgoKSkgKiAxMDA7XHJcbiAgY29uc3QgbmV3UGxheWJhY2tQb3NpdGlvblNlYyA9XHJcbiAgICAocGxheWVyLmdldER1cmF0aW9uKCkgLyAxMDApICogbmV3QnV0dG9uUG9zaXRpb247XHJcblxyXG4gIHBsYXllckJ1dHRvbi5jc3Moe1xyXG4gICAgbGVmdDogYCR7bmV3QnV0dG9uUG9zaXRpb259JWAsXHJcbiAgfSk7XHJcblxyXG4gIHBsYXllclBsYXliYWNrWWVsbG93LmNzcyh7XHJcbiAgICB3aWR0aDogYCR7bmV3QnV0dG9uUG9zaXRpb259JWAsXHJcbiAgfSk7XHJcblxyXG4gIHBsYXllci5zZWVrVG8obmV3UGxheWJhY2tQb3NpdGlvblNlYyk7XHJcbn0pO1xyXG5cclxucGxheWVyU3BsYXNoLmNsaWNrKChlKSA9PiB7XHJcbiAgcGxheWVyLnBsYXlWaWRlbyhlKTtcclxufSk7XHJcblxyXG5jb25zdCBvblBsYXllclJlYWR5ID0gKCkgPT4ge1xyXG4gIGxldCBpbnRlcnZhbDtcclxuICBjb25zdCBkdXJhdGlvblNlYyA9IHBsYXllci5nZXREdXJhdGlvbigpO1xyXG5cclxuICBwbGF5ZXJEdXJhdGlvbi50ZXh0KGR1cmF0aW9uU2VjKTtcclxuXHJcbiAgaWYgKHR5cGVvZiBpbnRlcnZhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbiAgfVxyXG5cclxuICBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgIGNvbnN0IGNvbXBsZXRlZFNlYyA9IHBsYXllci5nZXRDdXJyZW50VGltZSgpO1xyXG4gICAgY29uc3QgY29tcGxldGVkUGVyY2VudCA9IChjb21wbGV0ZWRTZWMgLyBkdXJhdGlvblNlYykgKiAxMDA7XHJcblxyXG4gICAgcGxheWVyQnV0dG9uLmNzcyh7XHJcbiAgICAgIGxlZnQ6IGAke2NvbXBsZXRlZFBlcmNlbnR9JWAsXHJcbiAgICB9KTtcclxuXHJcbiAgICBwbGF5ZXJQbGF5YmFja1llbGxvdy5jc3Moe1xyXG4gICAgICB3aWR0aDogYCR7Y29tcGxldGVkUGVyY2VudH0lYCxcclxuICAgIH0pO1xyXG5cclxuICAgIHBsYXllckNvbXBsZXRlZC50ZXh0KGNvbXBsZXRlZFNlYyk7XHJcbiAgfSwgMTAwMCk7XHJcbn07XHJcblxyXG5jb25zdCBvblBsYXllclN0YXRlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XHJcbiAgLypcclxuICAgICAtMSAo0LLQvtGB0L/RgNC+0LjQt9Cy0LXQtNC10L3QuNC1INCy0LjQtNC10L4g0L3QtSDQvdCw0YfQsNGC0L4pXHJcbiAgICAgMCAo0LLQvtGB0L/RgNC+0LjQt9Cy0LXQtNC10L3QuNC1INCy0LjQtNC10L4g0LfQsNCy0LXRgNGI0LXQvdC+KVxyXG4gICAgIDEgKNCy0L7RgdC/0YDQvtC40LfQstC10LTQtdC90LjQtSlcclxuICAgICAyICjQv9Cw0YPQt9CwKVxyXG4gICAgIDMgKNCx0YPRhNC10YDQuNC30LDRhtC40Y8pXHJcbiAgICAgNSAo0LLQuNC00LXQviDQv9C+0LTQsNGO0YIg0YDQtdC/0LvQuNC60LgpLlxyXG4gICovXHJcbiAgc3dpdGNoIChldmVudC5kYXRhKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHBsYXllckNvbnRhaW5lci5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgcGxheWVyQ29udGFpbmVyLmFkZENsYXNzKFwicGF1c2VkXCIpO1xyXG4gICAgICBicmVhaztcclxuXHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHBsYXllckNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgcGxheWVyQ29udGFpbmVyLnJlbW92ZUNsYXNzKFwicGF1c2VkXCIpO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBpc01vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1heC13aWR0aDogNzY4cHgpXCIpLm1hdGNoZXM7XHJcblxyXG5mdW5jdGlvbiBvbllvdVR1YmVJZnJhbWVBUElSZWFkeSgpIHtcclxuICBwbGF5ZXIgPSBuZXcgWVQuUGxheWVyKFwieXQtcGxheWVyXCIsIHtcclxuICAgIGhlaWdodDogXCIzOTJcIixcclxuICAgIHdpZHRoOiBcIjYyMlwiLFxyXG4gICAgdmlkZW9JZDogXCJKNUtJRjNzVlFaTVwiLFxyXG4gICAgZXZlbnRzOiB7XHJcbiAgICAgIG9uUmVhZHk6IG9uUGxheWVyUmVhZHksXHJcbiAgICAgIG9uU3RhdGVDaGFuZ2U6IG9uUGxheWVyU3RhdGVDaGFuZ2UsXHJcbiAgICB9LFxyXG4gICAgcGxheWVyVmFyczoge1xyXG4gICAgICBjb250cm9sczogMCxcclxuICAgICAgZGlzYWJsZWtiOiAwLFxyXG4gICAgICBzaG93aW5mbzogMCxcclxuICAgICAgcmVsOiAwLFxyXG4gICAgICBhdXRvcGxheTogMCxcclxuICAgICAgbW9kZXN0YnJhbmRpbmc6IDAsXHJcbiAgICB9LFxyXG4gIH0pO1xyXG59XHJcblxyXG5jb25zdCBwbGF5ZXJWb2x1bWUgPSAkKFwiLnBsYXllcl9fdm9sdW1lXCIpO1xyXG5jb25zdCBwbGF5ZXJSZWd1bGF0ZSA9ICQoXCIucGxheWVyX192b2x1bWUtcmVndWxhdGVcIik7XHJcbmNvbnN0IHBsYXllclZvbHVtZUJ1dHRvbiA9ICQoXCIucGxheWVyX192b2x1bWVfX2J1dHRvblwiKTtcclxuY29uc3QgcGxheWVyUmVndWxhdGVZZWxsb3cgPSAkKFwiLnBsYXllcl9fdm9sdW1lX19yZWd1bGF0ZS15ZWxsb3dcIik7XHJcblxyXG5jb25zdCBzZXRWb2x1bWVTdHlsZSA9ICh3aWR0aCwgbGVmdCkgPT4ge1xyXG4gIHBsYXllclJlZ3VsYXRlWWVsbG93LmNzcyh7XHJcbiAgICB3aWR0aDogYCR7d2lkdGh9JWAsXHJcbiAgfSk7XHJcblxyXG4gIHBsYXllclZvbHVtZUJ1dHRvbi5jc3Moe1xyXG4gICAgbGVmdDogYCR7bGVmdH0lYCxcclxuICB9KTtcclxufTtcclxuXHJcbnBsYXllclZvbHVtZS5jbGljaygoKSA9PiB7XHJcbiAgaWYgKHBsYXllclZvbHVtZS5oYXNDbGFzcyhcIm11dGVcIikpIHtcclxuICAgIHBsYXllclZvbHVtZS5yZW1vdmVDbGFzcyhcIm11dGVcIik7XHJcbiAgICBwbGF5ZXIudW5NdXRlKCk7XHJcbiAgICBzZXRWb2x1bWVTdHlsZSgxMDAsIDg1KTtcclxuICB9IGVsc2Uge1xyXG4gICAgcGxheWVyVm9sdW1lLmFkZENsYXNzKFwibXV0ZVwiKTtcclxuICAgIHBsYXllci5tdXRlKCk7XHJcbiAgICBzZXRWb2x1bWVTdHlsZSgwLCAwKTtcclxuICB9XHJcbn0pO1xyXG5zZXRWb2x1bWVTdHlsZSgxMDAsIDg1KTtcclxuXHJcbnBsYXllclJlZ3VsYXRlLmNsaWNrKChlKSA9PiB7XHJcbiAgY29uc3QgYmFuZCA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICBjb25zdCBjbGlja1Bvc2l0aW9uID0gZS5vcmlnaW5hbEV2ZW50LmxheWVyWDtcclxuICBjb25zdCBuZXdWb2x1bWVQb3NpdGlvbiA9IChjbGlja1Bvc2l0aW9uIC8gYmFuZC53aWR0aCgpKSAqIDEwMDtcclxuICBjb25zdCBuZXdQbGF5ZXJSZWd1bGF0ZVBvc2l0aW9uUGVyY2VudCA9XHJcbiAgICAocGxheWVyLmdldER1cmF0aW9uKCkgLyAxMDApICogbmV3Vm9sdW1lUG9zaXRpb247XHJcblxyXG4gIHNldFZvbHVtZVN0eWxlKG5ld1ZvbHVtZVBvc2l0aW9uLCBuZXdWb2x1bWVQb3NpdGlvbik7XHJcblxyXG4gIHBsYXllci5zZXRWb2x1bWUobmV3UGxheWVyUmVndWxhdGVQb3NpdGlvblBlcmNlbnQpO1xyXG59KTtcclxuIiwiY29uc3Qgb3BlbkhhbWJ1cmdlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWVudUhhbWJ1cmdlclwiKTtcclxuY29uc3QgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWVudVwiKTtcclxuY29uc3QgbWVudUNsb3NlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtZW51LWNsb3NlXCIpO1xyXG5jb25zdCBtZW51QXBwZWFyaW5nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5oYW1idXJnZXJfX21lbnUtbGlua1wiKTtcclxuY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xyXG5cclxuY29uc3Qgc2V0U3R5bGVzID0gKG1lbnVTdHlsZSwgYm9keVN0eWxlKSA9PiB7XHJcbiAgbWVudS5zdHlsZS5kaXNwbGF5ID0gbWVudVN0eWxlO1xyXG4gIGJvZHkuc3R5bGUub3ZlcmZsb3cgPSBib2R5U3R5bGU7XHJcbn07XHJcblxyXG5vcGVuSGFtYnVyZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gIHNldFN0eWxlcyhcImJsb2NrXCIsIFwiaGlkZGVuXCIpO1xyXG59KTtcclxuXHJcbm1lbnVDbG9zZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICBzZXRTdHlsZXMoXCJub25lXCIsIFwiaW5pdGlhbFwiKTtcclxufSk7XHJcblxyXG5tZW51QXBwZWFyaW5nLmZvckVhY2goKGxpbmspID0+IHtcclxuICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgLy8gZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgc2V0U3R5bGVzKFwibm9uZVwiLCBcImluaXRpYWxcIik7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuY29uc3Qgb3BlbkRlc2NyaXB0aW9uID0gJChcIi50ZWFtX19kZXNjLWluZm9cIik7XHJcblxyXG5vcGVuRGVzY3JpcHRpb24uZWFjaCgoXywgbGluaykgPT4ge1xyXG4gICQobGluaykub24oXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgb3BlbkRlc2NyaXB0aW9uLmVhY2goKF8sIGVsZW0pID0+IHtcclxuICAgICAgaWYgKGUuY3VycmVudFRhcmdldCAhPT0gZWxlbSkge1xyXG4gICAgICAgICQoZWxlbSkucGFyZW50KCkucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgJChlLmN1cnJlbnRUYXJnZXQpLnBhcmVudCgpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmNvbnN0IG9wZW5SZXZpZXdzID0gJChcIi5yZXZpZXdzX19zd2l0Y2hlci1pdGVtXCIpO1xyXG5jb25zdCBvcGVuSXRlbXMgPSAkKFwiLnJldmlld3NfX2l0ZW1cIik7XHJcblxyXG5vcGVuUmV2aWV3cy5lYWNoKChfLCBsaW5rKSA9PiB7XHJcbiAgJChsaW5rKS5vbihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBvcGVuUmV2aWV3cy5lYWNoKChpbmRleCwgZWxlbSkgPT4ge1xyXG4gICAgICBpZiAoJChlbGVtKS5oYXNDbGFzcyhcImFjdGl2ZVwiKSkge1xyXG4gICAgICAgICQoZWxlbSkucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgJChvcGVuSXRlbXNbaW5kZXhdKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZWxlbSA9PT0gZS5jdXJyZW50VGFyZ2V0KSB7XHJcbiAgICAgICAgJChlbGVtKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAkKG9wZW5JdGVtc1tpbmRleF0pLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcblxyXG5jb25zdCBwb2ludGVyTGVmdCA9ICQoXCIuc2hvcF9fcG9pbnRlci1sZWZ0XCIpO1xyXG5jb25zdCBwb2ludGVyUmlnaHQgPSAkKFwiLnNob3BfX3BvaW50ZXItcmlnaHRcIik7XHJcblxyXG5jb25zdCBzbGlkZXIgPSAkKFwiLnNob3BfX2NvbnRlbnQtbGlzdFwiKS5ieFNsaWRlcih7XHJcbiAgcGFnZXI6IGZhbHNlLFxyXG4gIGNvbnRyb2xzOiBmYWxzZSxcclxufSk7XHJcblxyXG5wb2ludGVyTGVmdC5jbGljaygoZSkgPT4ge1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuICBzbGlkZXIuZ29Ub1ByZXZTbGlkZSgpO1xyXG59KTtcclxuXHJcbnBvaW50ZXJSaWdodC5jbGljaygoZSkgPT4ge1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuICBzbGlkZXIuZ29Ub05leHRTbGlkZSgpO1xyXG59KTtcclxuIl19
